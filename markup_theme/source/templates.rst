.. 
.. xxxxx
.. 



==================================================
Site Templates
==================================================

Site templates control how the MARKUP theme is built. There are global templates and site-specific templates. There are templates that focus on specific navigation areas of the site output.

The MARKUP theme relies on the global templates generally, and then uses site-specific templates for page layout, left-side navigation, and search.




layout.html
==================================================
The layout.html file controls the site layout, including the locations in which all navigation elements, sub-templates, and everything else should go. The global layout.html file is in ``_themes/markup/layout.html`` and is overridden in the MARKUP theme by site-specific layout.html files, each of which are located at ``<site-directory>/sources/_templates/layout.html``.

It's an important file and each docs collection gets its own for the following reasons:

#. To ensure the ``is-active`` attribute for navigation links is set to the active site.
#. To enable the possibility that hamburger buttons, URLs, logos, the number of items in the top-level navigation, and whatever else are *not* global.

Ideally, the top-level navigation and user experience is the same for all of the primary topic collections. But this should not always be true.

The layout.html file has some important sections, detailed below.


{% block nav_main %}
--------------------------------------------------
The ``nav_main`` block is what defines the navigation structure that appears across the top of the documentation web site, along with the site logo and the icon used for the hamburger button.

For example:

.. code-block:: html
   :emphasize-lines: 6,7,12,14,15,16,21,24,26,27

   <nav class="nav-main" role="navigation" data-topbar>
     <div class="nav-inner">
       <div class="left">
         <h1>
           <a href="../index.html">
             <img id="markup" height="34" src="_static/markup-logo.svg"
              onerror="_static/markup-logo.png"/>
           </a>
         </h1>
       </div>

       <div id="nav-icon"><i class="fas fa-bars"></i></div>

       <a href="https://www.companysite.com/">
         <img id="logo" src="_static/markup-topnav.svg"
          onerror="_static/markup-topnav.png"/>
       </a>

       <ul class="nav-links links-main">
         <li class="nav-link">
           <a href="../index.html">Theme and Templates</a>
         </li>
         <li class="nav-link">
           <a href="/rst/rst.html">reStructuredText</a>
         </li>
         <li class="nav-link is-active">
           <a href="/md/md.html">Markdown</a>
         </li>
       </ul>

     </div>
   </nav>

The highlighted sections show where site-specific customizations should be made. Each docs collection may define its own logo, the icon to use for the hamburger button, the URL for the "company site" (this might be an application-specific site or a company-specific site), the company logo itself, and the top-level navigation elements.

.. hint:: Don't forget to make sure the ``<li class="nav-link is-active">`` part is set to the correct site.


nav-docs.html
==================================================
The nav-docs.html a JSON file defines the structure of the left-side navigation. This structure is defined in two locations:

#. A global nav-docs.html file located in ``_themes/markup/nav-docs.html``. Most of the global nav-docs.html file is not directly visible in the final output.
#. A site-specific nav-docs.html file that extends the global structure on a per-site basis is located at ``<site-directory>/sources/_templates/layout.html``.

.. note:: One reason the nav-docs.html file exists in the way that it does is because the MARKUP theme does *not* build the left-side navigation automatically based on the header structure within topics or via the ``toctree`` element. This is because very large doc sets can get very complex, but also (and more importantly) the MARKUP theme chooses this approach so as to ensure that the ability to have custom navigation structures within the primary navigation structure (and on a site-specific basis) is possible.

   The paths that are defined within the nav-docs.html file are relative to the site, but they can also be cross-site, and external. Using this approach, navigation links in site A can easily link to some (or all) of site B. Whereas links generated by a ``toctree`` element must be internal, always. But what if you need to link to something outside of the Sphinx world? Or to a docs collection built by a different team? Or whatever?

   A well-designed docs site will have a very static left-side navigation. So outside of the process of adding items to it and occasionally moving things around or handling a deprecation, they should be very static. The JSON syntax is a bit tricky, but once you get the hang of it, the effort to maintain it is minimal, but with the added benefit of people on your team reviewing it closely every time a change is made.


Global Navigation
--------------------------------------------------
The global nav-docs.html file defines the form of the left-side navigation structure. Most of this structure is replaced by the contents of the site-specific nav-docs.html file with the exception of some global links that are placed at the bottom of the navigation.

The section after the final ``{% endblock %}`` in the global nav-docs.html file defines a series of links that appear underneath the site-specific navigation structure. Each of these elements has the following structure:

.. code-block:: html

   <li class="main-item dark-item">
     <a href="index.html">
       <i class="fas fa-sitemap fa-fw icon-left"></i>Site Map</a>
   </li>

There can be as many of these as you want. For example:

.. code-block:: html

   <li class="main-item dark-item">
     <a href="index.html">
       <i class="fas fa-sitemap fa-fw icon-left"></i>Site Map</a>
   </li>
   <li class="main-item dark-item">
     <a href="index.html">
       <i class="fas fa-life-ring fa-fw icon-left"></i>Support</a>
   </li>
   <li class="main-item dark-item">
     <a href="index.html">
       <i class="fas fa-comment-dots fa-fw icon-left"></i>Feedback</a>
   </li>

This could be links to other docs collections, marketing resource pages, training sites, or whatever you want.


Site-specific Navigation
--------------------------------------------------
The site-specific nav-docs.html file has a lot of important details. It specifies:

* The name of the docs collection
* The string that appears in the browser tab/window.
* The structure of the left-side navigation for this document collection.

For example:

.. code-block:: django
   :emphasize-lines: 2,3,5

   {% extends "!nav-docs.html" %}
   {% set active_product = "MARKUP Theme" %}
   {% set active_page_name = "MARKUP Theme" %}
   {% set active_version = "current" %}
   {% set navItems = [
     {
       "title": "Some Section",
       "image": "markup-mark-grey.svg",
       "subItems": [
         {
           "title": "Some Title",
           "hasSubItems": false,
           "url": "/some_file.html"
         },
         {
           "title": "Some Other File",
           "hasSubItems": false,
           "url": "/some_other_file.html"
         },
       ]
     },
   ] -%}


Navigation Structure
--------------------------------------------------
The left navigation structure is limited to up to four levels, the first being a mandatory (and arbitrary) group name. Levels two through four are available for linking to topics and/or anchor references in the doc collection or for defining additional groups of topics. The following example shows the available structural options, with the various level options highlighted:

.. code-block:: django
   :emphasize-lines: 2,6,10,14,19,26,33

   {
     "title": "Level 1 Group",
     "image": "markup-mark-grey.svg",
     "subItems": [
       {
         "title": "Level 2 Group",
         "hasSubItems": true,
         "subItems": [
           {
             "title": "Level 3 Group",
             "hasSubItems": true,
             "subItems": [
               {
                 "title": "Level 4 Standalone",
                 "hasSubItems": false,
                 "url": "/topic_name.html#anchor"
               },
               {
                 "title": "Level 4 Standalone",
                 "hasSubItems": false,
                 "url": "/topic_name.html#anchor"
               },
             ]
           },
           {
             "title": "Level 3 Standalone",
             "hasSubItems": false,
             "url": "/topic_name.html#anchor"
           },
         ]
       },
       {
         "title": "Level 2 Standalone",
         "hasSubItems": false,
         "url": "/topic_name.html#anchor"
       },
     ]
   },


Up to four levels may be specified, in just about any order you want.

#. The first level (Level 1) is not a link to content, but rather a grouping of content.
#. The second and third levels may specify a grouping of content.
#. The second through fourth levels may specify standalone links to topics and/or headers within topics in the documentation collection. Links to topics must specify the filename and links to headers must specify the link as an anchor reference.

   .. note:: This link is a path to a file in the document site.  

How you decide to define the left-side structure is up to you. One approach the MARKUP theme takes is to rougly map the headers in the topics to the left-side navigation, where a topic title might be a level 1 grouping. But this depends on how you decide to organize your content.


Navigation Paths
--------------------------------------------------
The navigation paths specified by the ``url`` setting are HTML paths:

* For topics in the same collection, use ``"url": "/topic_name.html"`` or ``"url": "/topic_name.html#anchor"``.
* For topics in a different collection that's part of the larger docs site use a path similar to ``"url": "../../path-to/topic-name.html"`` or ``"url": "../../path-to/topic-name.html#anchor"``.
* The URL may also be an arbitrary URL that links to anywhere else: ``"url": "https://your-site.com/topic-name.html"``.


Active Product
--------------------------------------------------
The ``active_product`` setting specifies the name of the product for which this documentation collection exists.

.. code-block:: django

   {% set active_product = "MARKUP Theme" %}

.. warning:: This setting is unused and should (for now) contain the same exact string as the ``active_page_name`` setting.


Active Page Name
--------------------------------------------------
The ``active_page_name`` setting specifies the first entry at the top of the left navigation.

.. code-block:: django

   {% set active_page_name = "MARKUP Theme" %}

.. warning:: This setting is required and should be consistent with product naming and strings that are specified in ``layout.html``.


Active Version
--------------------------------------------------
The ``active_version`` setting specifies the application version to which this documentation collection applies. For example: "current" (for the current version of the active product) or "1.1.1", "1.1.2", etc.

.. code-block:: django

   {% set active_version = "current" %}

.. note:: The active version relies on a currently-disabled version picker that can be enabled in the left-side navigation. This version picker is not as cool and fancy as other version pickers out there and it doesn't populate itself automatically, but it works if you need it to. Uncomment the following in the global nav-docs.html file:

   .. code-block:: none

      <li class="version-picker">
        Filter by product and version
        {% include 'version-picker.html' with context %}
      </li>

   and then open ``/_themes/markup/version-picker.html`` and configure that file to populate the structure of the drop-down menu. This file is a simple HTML unordered list that groups content sets together. It's flexible. Play around with it and see what you prefer.




CSS Stylesheets
==================================================
CSS stylesheets are managed using Sass: http://sass-lang.com/install. The Sass templates are located in the theme: ``_themes/markup/static/scss``. Sass must be installed, and then run from the ``_themes/markup/static`` directory using the following command:

.. code-block:: console

   $ sass --watch scss/markup.scss:markup.css_t

After Sass is running, open the Sass template files in a text editor and make changes. Sass will update changes made in the templates to the CSS file for the theme. The ``_themes/markup/static/scss`` directory has the following files:

* ``_config.scss`` defines template variables for managing colors, fonts, and some other things.
* ``_nav-docs.scss`` defines the styles and presentation for the left-side navigation tree.
* ``_nav.scss`` defines the navigation that exists across the top of the site.
* ``_reset.scss`` should not be modified; it's the backup file in case (for whatever reason) a style doesn't work.
* ``_sidebar-ad.scss`` should not be modified.
* ``_sphinx.scss`` defines the styles and presentation for the actual documentation page.
* ``_version-picker.scss`` is unused in the current theme.
* ``markup.scss`` should only be modified when additiona custom underscore-prefixed pages are added to the Sass templates directory

The underscore-prefixed files are aggregated into the file located at ``_themes/markup/static/markup.css_t`` and are managed by the ``markup.scss`` file to generate the CSS file that is used by the theme for presenting the layout of the docs website.


