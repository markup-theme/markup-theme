.. 
.. xxxxx
.. 



==================================================
Site Templates
==================================================

Site templates control how the MARKUP theme is built. There are global templates and site-specific templates. There are templates that focus on specific navigation areas of the site output.

The MARKUP theme relies on the global templates generally, and then uses site-specific templates for page layout, left-side navigation, and search.


.. _templates-layout:

layout.html
==================================================
The layout.html file controls the site layout, including the locations in which all navigation elements, sub-templates, and everything else should go. The global layout.html file is in ``_themes/markup/layout.html`` and is overridden in the MARKUP theme by site-specific layout.html files, each of which are located at ``<site-directory>/sources/_templates/layout.html``.

It's an important file and each docs collection gets its own for the following reasons:

#. To ensure the ``is-active`` attribute for navigation links is set to the active site.
#. To enable the possibility that hamburger buttons, URLs, logos, the number of items in the top-level navigation, and whatever else are *not* global.

Ideally, the top-level navigation and user experience is the same for all of the primary topic collections. But this should not always be true.

The layout.html file has some important sections, detailed below.


.. _templates-block-nav-main:

{% block nav_main %}
--------------------------------------------------
The ``nav_main`` block is what defines the navigation structure that appears across the top of the documentation web site, along with the site logo and the icon used for the hamburger button.

For example:

.. code-block:: html
   :emphasize-lines: 6,7,12,14,15,16,21,24,26,27

   <nav class="nav-main" role="navigation" data-topbar>
     <div class="nav-inner">
       <div class="left">
         <h1>
           <a href="../index.html">
             <img id="markup" height="34" src="_static/markup-logo.svg"
              onerror="_static/markup-logo.png"/>
           </a>
         </h1>
       </div>

       <div id="nav-icon"><i class="fas fa-bars"></i></div>

       <a href="https://www.companysite.com/">
         <img id="logo" src="_static/markup-topnav.svg"
          onerror="_static/markup-topnav.png"/>
       </a>

       <ul class="nav-links links-main">
         <li class="nav-link">
           <a href="../index.html">Theme and Templates</a>
         </li>
         <li class="nav-link">
           <a href="/rst/rst.html">reStructuredText</a>
         </li>
         <li class="nav-link is-active">
           <a href="/md/md.html">Markdown</a>
         </li>
       </ul>

     </div>
   </nav>

The highlighted sections show where site-specific customizations should be made. Each docs collection may define its own logo, the icon to use for the hamburger button, the URL for the "company site" (this might be an application-specific site or a company-specific site), the company logo itself, and the top-level navigation elements.

.. hint:: Don't forget to make sure the ``<li class="nav-link is-active">`` part is set to the correct site.


.. _templates-nav-docs:

nav-docs.html
==================================================
The nav-docs.html a JSON file defines the structure of the left-side navigation. This structure is defined in two locations:

#. A global nav-docs.html file located in ``_themes/markup/nav-docs.html``. Most of the global nav-docs.html file is not directly visible in the final output.
#. A site-specific nav-docs.html file that extends the global structure on a per-site basis is located at ``<site-directory>/sources/_templates/layout.html``.

.. note:: One reason the nav-docs.html file exists in the way that it does is because the MARKUP theme does *not* build the left-side navigation automatically based on the header structure within topics or via the ``toctree`` element. This is because very large doc sets can get very complex, but also (and more importantly) the MARKUP theme chooses this approach so as to ensure that the ability to have custom navigation structures within the primary navigation structure (and on a site-specific basis) is possible.

   The paths that are defined within the nav-docs.html file are relative to the site, but they can also be cross-site, and external. Using this approach, navigation links in site A can easily link to some (or all) of site B. Whereas links generated by a ``toctree`` element must be internal, always. But what if you need to link to something outside of the Sphinx world? Or to a docs collection built by a different team? Or whatever?

   A well-designed docs site will have a very static left-side navigation. So outside of the process of adding items to it and occasionally moving things around or handling a deprecation, they should be very static. The JSON syntax is a bit tricky, but once you get the hang of it, the effort to maintain it is minimal, but with the added benefit of people on your team reviewing it closely every time a change is made.


.. _templates-global-navigation:

Global Navigation
--------------------------------------------------
The global nav-docs.html file defines the form of the left-side navigation structure. Most of this structure is replaced by the contents of the site-specific nav-docs.html file with the exception of some global links that are placed at the bottom of the navigation.

The section after the final ``{% endblock %}`` in the global nav-docs.html file defines a series of links that appear underneath the site-specific navigation structure. Each of these elements has the following structure:

.. code-block:: html

   <li class="main-item dark-item">
     <a href="index.html">
       <i class="fas fa-sitemap fa-fw icon-left"></i>Site Map</a>
   </li>

There can be as many of these as you want. For example:

.. code-block:: html

   <li class="main-item dark-item">
     <a href="index.html">
       <i class="fas fa-sitemap fa-fw icon-left"></i>Site Map</a>
   </li>
   <li class="main-item dark-item">
     <a href="index.html">
       <i class="fas fa-life-ring fa-fw icon-left"></i>Support</a>
   </li>
   <li class="main-item dark-item">
     <a href="index.html">
       <i class="fas fa-comment-dots fa-fw icon-left"></i>Feedback</a>
   </li>

This could be links to other docs collections, marketing resource pages, training sites, or whatever you want.


.. _templates-site-navigation:

Site-specific Navigation
--------------------------------------------------
The site-specific nav-docs.html file has a lot of important details. It specifies:

* The name of the docs collection
* The string that appears in the browser tab/window.
* The structure of the left-side navigation for this document collection.

For example:

.. code-block:: django
   :emphasize-lines: 2,3,5

   {% extends "!nav-docs.html" %}
   {% set active_product = "MARKUP Theme" %}
   {% set active_page_name = "MARKUP Theme" %}
   {% set active_version = "current" %}
   {% set navItems = [
     {
       "title": "Some Section",
       "iconClass": "fas fa-award",
       "subItems": [
         {
           "title": "Some Title",
           "hasSubItems": false,
           "url": "/some_file.html"
         },
         {
           "title": "Some Other File",
           "hasSubItems": false,
           "url": "/some_other_file.html"
         },
       ]
     },
   ] -%}


.. _templates-navigation-structure:

Navigation Structure
--------------------------------------------------

The navigation structure for the left-side navigation is defined as a JSON structure. It's a site-specific component of the Jinja templating that defines the static site that is generated by Sphinx. Each document collection must have a site-specific topic structure.

The topic structure in the left-side navigation can have as many topics as you want. The links will generally point to topics within the document collection, but they may also point to other targets, such as topics in other document collections, or even to pages that are external to the document website.

Sphinx will validate the structure and format of this file during build time, but will not verify that the link itself opens the intended target. It is up to the author of the topic to validate each link to be sure they work as intended.

The left-side navigation structure is defined within the ``navItems`` element within ``nav-docs.html``:

   .. code-block:: django
      :emphasize-lines: 7,8,9,10,11

      {% extends "!nav-docs.html" %}
      {% set active_product = "STUB" %}
      {% set active_page_name = "STUB" %}
      {% set active_version = "current" %}
      {% set active_page_icon = '<i class="far fa-parachute-box fa-fw icon-left"></i>' %}
      {% set active_search_path = "../path_goes_here/search.html" %}
      {% set navItems = [

      ...

      ] -%}


.. _readme-nav-docs-levels:

Levels
++++++++++++++++++++++++++++++++++++++++++++++++++

Up to four levels may be defined:

#. Level 1 may only contain groups of topics
#. Levels 2 and 3 may contain groups of topics and/or standalone topics
#. Level 4 may only contain standalone topics
#. Levels 2, 3, and 4 are the levels from which you may link to topics; links are typically to topics and anchors within this document collection, but may also be links to other document collections or even locations external to the site
#. Level 1 is assigned an icon from Font Awesome or a custom icon; levels 2, 3, and 4 may not be assigned an icon
#. Level 1 is visible when the group is closed; levels 2, 3, and 4 are only visible when level 1 is opened
#. Level 5 does not exist. You can *add* a level 5 to the ``nav-docs.html`` tree, but it won't render in the left-side navigation. Sorry.

How you decide to define the left-side structure is up to you. One approach the MARKUP theme takes is to rougly map the headers in the topics to the left-side navigation, where a topic title might be a level 1 grouping. But this depends on how you decide to organize your content.


.. _readme-nav-docs-level-one:

Level 1 (Group)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Level one must be a group of topics. Any number of level two standalone topics and level two groups may be defined.

   .. code-block:: django
      :emphasize-lines: 3,4,5,6,39,40

      {% set navItems = [

        {
          "title": "Level One (Group Only)",
          "iconClass": "fas fa-award",
          "subItems": [
            {
              "title": "Level Two (Standalone)",
              "hasSubItems": false,
              "url": "/path_goes_here/filename.html"
            },
            {
              "title": "Level Two (Group)",
              "hasSubItems": true,
              "subItems": [
                {
                  "title": "Level Three (Standalone)",
                  "hasSubItems": false,
                  "url": "/path_goes_here/filename.rst#anchor"
                },
                {
                  "title": "Level Three (Group)",
                  "hasSubItems": true,
                  "subItems": [
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                  ]
                },
              ]
            },
          ]
        },
      ] -%}


.. _readme-nav-docs-level-two-standalone:

Level 2 (Standalone)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Level 2 standalone topics are linkable to topics in the document collection.

   .. code-block:: django
      :emphasize-lines: 7,8,9,10,11

      {% set navItems = [

        {
          "title": "Level One (Group Only)",
          "iconClass": "fas fa-award",
          "subItems": [
            {
              "title": "Level Two (Standalone)",
              "hasSubItems": false,
              "url": "/path_goes_here/filename.html"
            },
            {
              "title": "Level Two (Group)",
              "hasSubItems": true,
              "subItems": [
                {
                  "title": "Level Three (Standalone)",
                  "hasSubItems": false,
                  "url": "/path_goes_here/filename.rst#anchor"
                },
                {
                  "title": "Level Three (Group)",
                  "hasSubItems": true,
                  "subItems": [
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                  ]
                },
              ]
            },
          ]
        },
      ] -%}


.. _readme-nav-docs-level-two-group:

Level 2 (Group)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A level 2 group contains one (or more) level 3 standalone topics and/or level 3 groups.

   .. code-block:: django
      :emphasize-lines: 12,13,14,15,37,38

      {% set navItems = [

        {
          "title": "Level One (Group Only)",
          "iconClass": "fas fa-award",
          "subItems": [
            {
              "title": "Level Two (Standalone)",
              "hasSubItems": false,
              "url": "/path_goes_here/filename.html"
            },
            {
              "title": "Level Two (Group)",
              "hasSubItems": true,
              "subItems": [
                {
                  "title": "Level Three (Standalone)",
                  "hasSubItems": false,
                  "url": "/path_goes_here/filename.rst#anchor"
                },
                {
                  "title": "Level Three (Group)",
                  "hasSubItems": true,
                  "subItems": [
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                  ]
                },
              ]
            },
          ]
        },
      ] -%}


.. _readme-nav-docs-level-three-standalone:

Level 3 (Standalone)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Level 3 standalone topics are linkable to topics in the document collection.

   .. code-block:: django
      :emphasize-lines: 16,17,18,19,20

      {% set navItems = [

        {
          "title": "Level One (Group Only)",
          "iconClass": "fas fa-award",
          "subItems": [
            {
              "title": "Level Two (Standalone)",
              "hasSubItems": false,
              "url": "/path_goes_here/filename.html"
            },
            {
              "title": "Level Two (Group)",
              "hasSubItems": true,
              "subItems": [
                {
                  "title": "Level Three (Standalone)",
                  "hasSubItems": false,
                  "url": "/path_goes_here/filename.rst#anchor"
                },
                {
                  "title": "Level Three (Group)",
                  "hasSubItems": true,
                  "subItems": [
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                  ]
                },
              ]
            },
          ]
        },
      ] -%}


.. _readme-nav-docs-level-three-group:

Level 3 (Group)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A level 3 group contains one (or more) level 4 standalone topics.

   .. code-block:: django
      :emphasize-lines: 21,22,23,24,35,36

      {% set navItems = [

        {
          "title": "Level One (Group Only)",
          "iconClass": "fas fa-award",
          "subItems": [
            {
              "title": "Level Two (Standalone)",
              "hasSubItems": false,
              "url": "/path_goes_here/filename.html"
            },
            {
              "title": "Level Two (Group)",
              "hasSubItems": true,
              "subItems": [
                {
                  "title": "Level Three (Standalone)",
                  "hasSubItems": false,
                  "url": "/path_goes_here/filename.rst#anchor"
                },
                {
                  "title": "Level Three (Group)",
                  "hasSubItems": true,
                  "subItems": [
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                  ]
                },
              ]
            },
          ]
        },
      ] -%}


.. _readme-nav-docs-level-four:

Level 4 (Standalone)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Level 4 standalone topics are linkable to topics in the document collection.

   .. code-block:: django
      :emphasize-lines: 25,26,27,28,29

      {% set navItems = [

        {
          "title": "Level One (Group Only)",
          "iconClass": "fas fa-award",
          "subItems": [
            {
              "title": "Level Two (Standalone)",
              "hasSubItems": false,
              "url": "/path_goes_here/filename.html"
            },
            {
              "title": "Level Two (Group)",
              "hasSubItems": true,
              "subItems": [
                {
                  "title": "Level Three (Standalone)",
                  "hasSubItems": false,
                  "url": "/path_goes_here/filename.rst#anchor"
                },
                {
                  "title": "Level Three (Group)",
                  "hasSubItems": true,
                  "subItems": [
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                    {
                      "title": "Level Four (Standalone)",
                      "hasSubItems": false,
                      "url": "/path_goes_here/filename.rst#anchor"
                    },
                  ]
                },
              ]
            },
          ]
        },
      ] -%}


.. _readme-nav-docs-section-icons:

Section Icons
++++++++++++++++++++++++++++++++++++++++++++++++++

Level one items are associated with an icon.

Font Awesome icons are associated using the ``iconClass`` value:

.. code-block:: django
   :emphasize-lines: 4

   {% set navItems = [
     {
       "title": "Some Section",
       "iconClass": "fas fa-award",
       "subItems": [
         {
           "title": "Some Title",
           "hasSubItems": false,
           "url": "/some_file.html"
         },
         {
           "title": "Some Other File",
           "hasSubItems": false,
           "url": "/some_other_file.html"
         },
       ]
     },
   ] -%}

For example, let's say you wanted to `use the Dizzy icon <https://fontawesome.com/icons/dizzy?style=solid>`__, then the change would look like this:

.. code-block:: django
   :emphasize-lines: 4

   {% set navItems = [
     {
       "title": "Some Section",
       "iconClass": "fas fa-dizzy",
       "subItems": [
         {
           "title": "Some Title",
           "hasSubItems": false,
           "url": "/some_file.html"
         },
         {
           "title": "Some Other File",
           "hasSubItems": false,
           "url": "/some_other_file.html"
         },
       ]
     },
   ] -%}

Custom icons are supported. To use a custom icon, first add that icon to the ``/_static`` directory for the document collection, and then replace the ``iconClass`` entry with an ``image`` entry, similar to:

.. code-block:: django
   :emphasize-lines: 4

   {% set navItems = [
     {
       "title": "Some Section",
       "image": "markup-mark-grey.svg",
       "subItems": [
         {
           "title": "Some Title",
           "hasSubItems": false,
           "url": "/some_file.html"
         },
         {
           "title": "Some Other File",
           "hasSubItems": false,
           "url": "/some_other_file.html"
         },
       ]
     },
   ] -%}


.. _templates-navigation-paths:

Navigation Paths
++++++++++++++++++++++++++++++++++++++++++++++++++
The navigation paths specified by the ``url`` setting are HTML paths:

* For topics in the same collection, use ``"url": "/topic_name.html"`` or ``"url": "/topic_name.html#anchor"``.
* For topics in a different collection that's part of the larger docs site use a path similar to ``"url": "../../path-to/topic-name.html"`` or ``"url": "../../path-to/topic-name.html#anchor"``.
* The URL may also be an arbitrary URL that links to anywhere else: ``"url": "https://your-site.com/topic-name.html"``.




.. _templates-active-product:

Active Product
--------------------------------------------------
The ``active_product`` setting specifies the name of the product for which this documentation collection exists.

.. code-block:: django

   {% set active_product = "MARKUP Theme" %}

.. warning:: This setting is unused and should (for now) contain the same exact string as the ``active_page_name`` setting.


.. _templates-active-page-name:

Active Page Name
--------------------------------------------------
The ``active_page_name`` setting specifies the first entry at the top of the left navigation.

.. code-block:: django

   {% set active_page_name = "MARKUP Theme" %}

.. warning:: This setting is required and should be consistent with product naming and strings that are specified in ``layout.html``.


.. _templates-active-version:

Active Version
--------------------------------------------------
The ``active_version`` setting specifies the application version to which this documentation collection applies. For example: "current" (for the current version of the active product) or "1.1.1", "1.1.2", etc.

.. code-block:: django

   {% set active_version = "current" %}

.. note:: The active version relies on a currently-disabled version picker that can be enabled in the left-side navigation. This version picker is not as cool and fancy as other version pickers out there and it doesn't populate itself automatically, but it works when you need it to. Uncomment the following in the global nav-docs.html file:

   .. code-block:: none

      <li class="version-picker">
        Filter by product and version
        {% include 'version-picker.html' with context %}
      </li>

   and then open ``/_themes/markup/version-picker.html`` and configure that file to populate the structure of the drop-down menu. This file is a simple HTML unordered list that groups content sets together. It's flexible. It'll be built to every docs collection in the site. Play around with it and see what you prefer.


